{
  "rules": {
    ".read": "auth != null",
    ".write": "auth != null",
    
    "users": {
      "$uid": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === $uid"
      },
      ".indexOn": ["email", "majorCode"]
    },
    
    "majors": {
      ".read": "auth != null",
      ".write": "false",
      ".indexOn": ["type", "academicYear"]
    },
    
    "modules": {
      ".read": "auth != null",
      ".write": "false",
      ".indexOn": ["majorCode", "credits", "level"]
    },
    
    "groups": {
      ".read": "auth != null",
      "$groupId": {
        ".write": "auth != null && (data.child('createdBy').val() === auth.uid || !data.exists())",
        "members": {
          ".write": "auth != null"
        },
        "messages": {
          ".write": "auth != null && root.child('groups').child($groupId).child('members').hasChild(auth.uid)"
        }
      },
      ".indexOn": ["moduleCode", "visibility", "createdBy"]
    },
    
    "messages": {
      "$groupId": {
        ".read": "auth != null && root.child('groups').child($groupId).child('members').hasChild(auth.uid)",
        ".write": "auth != null && root.child('groups').child($groupId).child('members').hasChild(auth.uid)",
        "$messageId": {
          ".validate": "newData.hasChildren(['text', 'userId', 'timestamp'])"
        },
        ".indexOn": ["timestamp"]
      }
    },
    
    "meetings": {
      ".read": "auth != null",
      ".indexOn": ["date", "groupId", "createdBy"],
      "$meetingId": {
        ".write": "auth != null && (data.child('createdBy').val() === auth.uid || !data.exists() || root.child('groups').child(data.child('groupId').val()).child('members').child(auth.uid).exists())"
      }
    },
    
    "studySpots": {
      ".read": "auth != null",
      ".write": "auth != null && root.child('admins').child(auth.uid).exists()",
      ".indexOn": ["addedBy", "location"]
    },
    
    "chats": {
      "$groupId": {
        ".read": "auth != null && root.child('groups').child($groupId).child('members').child(auth.uid).exists()",
        ".write": "auth != null && root.child('groups').child($groupId).child('members').hasChild(auth.uid)"
      }
    },
    
    "notifications": {
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null" 
      }
    },
    
    "metadata": {
      ".read": true,
      ".write": "false"
    }
  }
}
