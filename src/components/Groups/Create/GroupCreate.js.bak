import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate, useSearchParams, Link, useLocation as useRouteLocation } from 'react-router-dom';
import { ref, push, set, get } from 'firebase/database';
import { database } from '../../../firebase';
import { useAuth } from '../../../context/AuthContext';
import { useMajorsModules } from '../../../context/MajorsModulesContext';
import { useGoogleMaps } from '../../../context/GoogleMapsContext';
import { 
  FaBook, 
  FaMapMarkerAlt, 
  FaClock,
  FaArrowLeft,
  FaPlus,
  FaInfoCircle,
  FaGraduationCap,
  FaRegCalendarAlt
} from 'react-icons/fa';
import { allStudyLocations } from '../../../data/surreyLocations';
import SmallMapView from '../../Map/SmallMapView';
import MapControls from '../../Map/MapControls';
import EnhancedMarker from '../../Map/EnhancedMarker';
import { getMarkerIconForCategory } from '../../Map/customMarkers';

// Define map container style
const mapContainerStyle = {
  width: '100%',
  height: '300px',
};

function GroupCreate() {
  const { currentUser, userProfile } = useAuth();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const location = useRouteLocation();
  const { isLoaded, loadError } = useGoogleMaps();
  const initialModuleCode = searchParams.get('moduleCode');
  const { majors, modules, departments, loading: majorsModulesLoading } = useMajorsModules();
  
  // Form states
  const [name, setName] = useState('');
  const [moduleCode, setModuleCode] = useState(initialModuleCode || '');
  const [topic, setTopic] = useState('');
  const [description, setDescription] = useState('');
  const [meetingLocation, setMeetingLocation] = useState('');
  const [meetingTime, setMeetingTime] = useState('');
  const [maxMembers, setMaxMembers] = useState(10);
  const [useLocation, setUseLocation] = useState(false);
  const [coordinates, setCoordinates] = useState(null);
  const [visibility, setVisibility] = useState('public');
  const [userPosition, setUserPosition] = useState(null);
  const [selectedMajor, setSelectedMajor] = useState('');
  const [filteredModules, setFilteredModules] = useState([]);
  const [selectedModule, setSelectedModule] = useState(null);
  const [isLocationHelpVisible, setIsLocationHelpVisible] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [studyLocations, setStudyLocations] = useState([]);
  const [selectedPredefinedLocation, setSelectedPredefinedLocation] = useState(null);
  const [userModules, setUserModules] = useState([]);
  const [userModuleDetails, setUserModuleDetails] = useState([]);
  const [locationSearch, setLocationSearch] = useState('');
  const [showInfoWindow, setShowInfoWindow] = useState(null);
  const [mapType, setMapType] = useState('roadmap');  const [showAllModules, setShowAllModules] = useState(false);
  const [useDatepicker, setUseDatepicker] = useState(false);  const [meetingDate, setMeetingDate] = useState('');
  const [meetingTimeHour, setMeetingTimeHour] = useState('15');
  const [meetingTimeMinute, setMeetingTimeMinute] = useState('00');
  const [meetingTimeAmPm, setMeetingTimeAmPm] = useState('PM');
  const [addToCalendar, setAddToCalendar] = useState(true);
  const [recurringMeeting, setRecurringMeeting] = useState(false);
  const [recurrencePattern, setRecurrencePattern] = useState('weekly');
  const [recurrenceEndDate, setRecurrenceEndDate] = useState('');
  
  // UI states
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  // Check if location data passed from MapView
  useEffect(() => {
    if (location.state?.location) {
      const { coordinates, address } = location.state.location;
      if (coordinates) {
        setCoordinates(coordinates);
        setUseLocation(true);
      }
      if (address) {
        setMeetingLocation(address);
      }
      
      // If we have coordinates from MapView, we'll start with step 2 (location)
      // but we'll swap steps 1 and 2, so we still show the location step first
      setCurrentStep(1);
    }
  }, [location.state]);
  
  // Redirect if not logged in
  useEffect(() => {
    if (!currentUser) {
      navigate('/login', { state: { from: { pathname: '/groups/create' } } });
    }
  }, [currentUser, navigate]);
  
  // Load study locations from our data
  useEffect(() => {
    setStudyLocations(allStudyLocations);
  }, []);

  // Get user's current location if permissions are available
  useEffect(() => {
    const surreyCampus = [51.242, -0.589]; // Moved inside useEffect
    if (userProfile?.locationSharing) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserPosition([latitude, longitude]);
        },
        (err) => {
          console.error('Geolocation error:', err);
          // Fall back to Surrey campus location
          setUserPosition(surreyCampus);
        }
      );
    } else {
      // Default to Surrey campus
      setUserPosition(surreyCampus);
    }
  }, [userProfile]);

  // Get user's major and modules from profile
  useEffect(() => {
    if (!currentUser || !userProfile) return;
    
    // Set user's major if available in their profile
    if (userProfile?.majorCode) {
      setSelectedMajor(userProfile.majorCode);
    }
    
    // Fetch user's modules from database
    const fetchUserModules = async () => {
      try {
        const userModulesRef = ref(database, `users/${currentUser.uid}/modules`);
        const snapshot = await get(userModulesRef);
        
        if (snapshot.exists()) {
          const modulesData = snapshot.val();
          const userModuleCodes = Object.keys(modulesData);
          setUserModules(userModuleCodes);
          
          // Match module codes with full module details
          const moduleDetailsList = userModuleCodes
            .map(code => {
              const moduleDetail = modules.find(m => m.code === code);
              return moduleDetail || null;
            })
            .filter(Boolean);
          
          setUserModuleDetails(moduleDetailsList);
          
          // If no initial module is specified and user has modules, suggest the first one
          if (!initialModuleCode && userModuleCodes.length > 0 && !moduleCode) {
            setModuleCode(userModuleCodes[0]);
          }
        }
      } catch (error) {
        console.error("Error fetching user modules:", error);
      }
    };
    
    if (modules.length > 0) {
      fetchUserModules();
    }
  }, [currentUser, userProfile, initialModuleCode, moduleCode, modules]);

  // Filter modules based on selected major
  useEffect(() => {
    if (majorsModulesLoading) return;
    
    if (!selectedMajor) {
      setFilteredModules(modules);
      return;
    }
    
    const modulesForMajor = modules.filter(module => 
      module.programs && module.programs.includes(selectedMajor)
    );
    
    setFilteredModules(modulesForMajor);
  }, [selectedMajor, modules, majorsModulesLoading]);

  // Find selected module data
  useEffect(() => {
    if (moduleCode && modules.length > 0) {
      const foundModule = modules.find(m => m.code === moduleCode);
      setSelectedModule(foundModule || null);
      
      // Set default group name based on module if name is empty
      if (foundModule && !name) {
        setName(`${foundModule.name} Study Group`);
      }
    }
  }, [moduleCode, modules, name]);

  // Set selected major based on module's programs if a module is pre-selected
  useEffect(() => {
    if (initialModuleCode && modules.length > 0 && !selectedMajor) {
      const module = modules.find(m => m.code === initialModuleCode);
      if (module && module.programs && module.programs.length > 0) {
        // Use the first program associated with this module
        setSelectedMajor(module.programs[0]);
      }
    }
  }, [initialModuleCode, modules, selectedMajor]);
    // Handle map location selection
  const handleLocationSelect = (position) => {
    if (!position || typeof position.lat === 'undefined' || typeof position.lng === 'undefined') {
      console.error('Invalid position received:', position);
      return;
    }
    
    setCoordinates({
      lat: position.lat,
      lng: position.lng
    });
    
    // Clear any pre-selected location
    setSelectedPredefinedLocation(null);
  };

  // Handle predefined location selection
  const handlePredefinedLocation = (spot) => {
    setCoordinates({
      lat: spot.location.lat,
      lng: spot.location.lng
    });
    setSelectedPredefinedLocation(spot);
    setMeetingLocation(spot.name);
  };
  
  // Handle location toggle
  const handleLocationToggle = async () => {
    const newState = !useLocation;
    setUseLocation(newState);
    
    // If turning on location and no coordinates set yet, use user's position if available
    if (newState && !coordinates && userPosition) {
      setCoordinates({
        lat: userPosition[0],
        lng: userPosition[1]
      });
    }
  };

  // Handle module change
  const handleModuleChange = (e) => {
    const selectedCode = e.target.value;
    setModuleCode(selectedCode);
    
    // Find module's details
    if (selectedCode) {
      const foundModule = modules.find(m => m.code === selectedCode);
      if (foundModule) {
        setSelectedModule(foundModule);
        
        // Update name suggestion if empty
        if (!name || name === `${selectedModule?.name} Study Group`) {
          setName(`${foundModule.name} Study Group`);
        }
      }
    } else {
      setSelectedModule(null);
    }
  };

  // Handle major change
  const handleMajorChange = (e) => {
    const majorCode = e.target.value;
    setSelectedMajor(majorCode);
    
    // Reset module selection if changing major
    if (moduleCode) {
      const currentModule = modules.find(m => m.code === moduleCode);
      if (currentModule && majorCode && !currentModule.programs.includes(majorCode)) {
        setModuleCode('');
        setSelectedModule(null);
      }
    }
  };
  // Move to next step
  const handleNextStep = () => {
    // Validate current step based on which content is being shown
    const currentContent = getStepContent(currentStep);
    
    if (currentContent === 'basic-info') {
      // Validate basic info fields
      if (!name.trim() || !moduleCode || !description.trim()) {
        setError('Please fill in all required fields before continuing');
        return;
      }
    } else if (currentContent === 'location' && useLocation && !coordinates) {
      // Validate location fields if location sharing is enabled
      setError('Please select a location on the map');
      return;
    }
    
    setCurrentStep(currentStep + 1);
    setError('');
  };

  // Move to previous step
  const handlePreviousStep = () => {
    setCurrentStep(currentStep - 1);
    setError('');
  };
  
  // Form validation
  const validateForm = () => {
    if (!name.trim()) {
      setError('Group name is required');
      return false;
    }
    
    if (!moduleCode) {
      setError('Please select a module');
      return false;
    }
    
    if (!description.trim()) {
      setError('Description is required');
      return false;
    }
    
    if (useLocation && !coordinates) {
      setError('Please select a location on the map');
      return false;
    }
    
    return true;
  };
  
  // Format time for 24 hour format
  const formatTimeFor24Hour = () => {
    let hour = parseInt(meetingTimeHour);
    
    // Convert to 24-hour format if PM
    if (meetingTimeAmPm === 'PM' && hour < 12) {
      hour += 12;
    }
    // Convert 12 AM to 00
    else if (meetingTimeAmPm === 'AM' && hour === 12) {
      hour = 0;
    }
    
    return `${hour.toString().padStart(2, '0')}:${meetingTimeMinute}`;
  };
  // Generate display time in a readable format
  const getDisplayTime = useCallback(() => {
    // Format minutes with leading zero if needed
    const minutes = meetingTimeMinute.padStart(2, '0');
    return `${meetingTimeHour}:${minutes} ${meetingTimeAmPm}`;
  }, [meetingTimeHour, meetingTimeMinute, meetingTimeAmPm]);
    // Update text field when time selectors change
  useEffect(() => {
    // Only update if time selectors have been interacted with
    if (meetingTimeHour !== '15' || meetingTimeMinute !== '00' || meetingTimeAmPm !== 'PM') {
      const newDisplayTime = getDisplayTime();
      if (meetingDate) {
        // If date is selected, create a date-specific time string
        const dateObj = new Date(meetingDate);
        const dateString = dateObj.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        const newTimeString = `${dateString} at ${newDisplayTime}`;
        
        // Only update if different to avoid loops
        if (meetingTime !== newTimeString) {
          setMeetingTime(newTimeString);
        }
      }
    }
  }, [meetingTimeHour, meetingTimeMinute, meetingTimeAmPm, meetingDate, meetingTime, getDisplayTime]);

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Reset error
    setError('');
    
    // Validate form
    if (!validateForm()) {
      return;
    }
    
    try {
      setLoading(true);
      
      // Create group object
      const groupData = {
        name: name.trim(),
        moduleCode,
        moduleName: selectedModule ? selectedModule.name : '',
        description: description.trim(),
        createdBy: currentUser.uid,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        visibility: visibility,
        members: {
          [currentUser.uid]: {
            role: 'admin',
            joinedAt: new Date().toISOString(),
            name: userProfile?.name || currentUser.displayName || 'User'
          }
        },
        memberCount: 1,
        maxMembers: parseInt(maxMembers) || 10
      };
      
      // Add optional fields if they exist
      if (topic.trim()) {
        groupData.topic = topic.trim();
      }
      
      if (meetingLocation.trim()) {
        groupData.location = meetingLocation.trim();
      }
        if (meetingTime.trim()) {
        groupData.meetingTime = meetingTime.trim();
      }
        // If a specific date and time are selected, add formatted time to group data
      if (meetingDate) {
        const formattedTime = formatTimeFor24Hour();
        const displayTime = getDisplayTime();
        groupData.formattedTime = formattedTime;
        groupData.displayTime = displayTime;
      }
      
      // Add coordinates if using location
      if (useLocation && coordinates) {
        groupData.coordinates = coordinates;
      }

      // Add major information if available
      if (selectedMajor) {
        groupData.majorCode = selectedMajor;
        const majorData = majors.find(m => m.code === selectedMajor);
        if (majorData) {
          groupData.majorName = majorData.name;
        }
      }

      // Add selected location information if available
      if (selectedPredefinedLocation) {
        groupData.locationDetails = {
          id: selectedPredefinedLocation.id,
          category: selectedPredefinedLocation.category,
          features: selectedPredefinedLocation.features
        };
      }
      
      // Push group to database
      const groupsRef = ref(database, 'groups');
      const newGroupRef = push(groupsRef);
      const groupId = newGroupRef.key;
      await set(newGroupRef, groupData);
        // If we have a meeting date and want to add to calendar, create a meeting
      if (meetingDate && addToCalendar) {
        try {          // Format time to 24-hour format for storage
          const formattedTime = formatTimeFor24Hour();
          const displayTime = getDisplayTime();
          
          const meetingData = {
            title: name.trim(),
            groupId: groupId,
            groupName: name.trim(),
            moduleCode: moduleCode || null,
            moduleName: selectedModule ? selectedModule.name : null,
            date: meetingDate,
            time: formattedTime, // Use the selected time in 24hr format
            displayTime: displayTime, // Add display time for UI
            location: meetingLocation || null,
            coordinates: coordinates || null,
            createdBy: currentUser.uid,
            createdAt: new Date().toISOString(),
            participants: {
              [currentUser.uid]: {
                name: userProfile?.name || currentUser.displayName || 'User',
                joinedAt: new Date().toISOString(),
                status: 'confirmed'
              }
            },
            note: description || null
          };
          
          // Add meeting to database
          const meetingsRef = ref(database, 'meetings');
          const newMeetingRef = push(meetingsRef);
          await set(newMeetingRef, meetingData);
          
          // If this is a recurring meeting, create additional meetings
          if (recurringMeeting) {
            const baseDate = new Date(meetingDate);
            
            // Determine end date (default to 3 months from start if not specified)
            const endDate = recurrenceEndDate ? new Date(recurrenceEndDate) : new Date(baseDate);
            if (!recurrenceEndDate) {
              endDate.setMonth(endDate.getMonth() + 3);
            }
            
            // Calculate interval for recurrence pattern
            let dayInterval = 7; // default to weekly
            switch (recurrencePattern) {
              case 'daily':
                dayInterval = 1;
                break;
              case 'weekly':
                dayInterval = 7;
                break;
              case 'biweekly':
                dayInterval = 14;
                break;
              case 'monthly':
                dayInterval = 30;
                break;
              default:
                dayInterval = 7; // Default to weekly if unknown pattern
                break;
            }
            
            // Create recurring meetings
            const nextDate = new Date(baseDate);
            nextDate.setDate(nextDate.getDate() + dayInterval); // Start with second occurrence
            
            while (nextDate <= endDate) {
              const recurringMeetingData = {
                ...meetingData,
                date: nextDate.toISOString().split('T')[0],
                isRecurring: true,
                recurrencePattern: recurrencePattern,
                originalMeetingId: newMeetingRef.key
              };
              
              // Add recurring meeting to database
              const recurringMeetingRef = push(meetingsRef);
              await set(recurringMeetingRef, recurringMeetingData);
              
              // Move to next occurrence
              nextDate.setDate(nextDate.getDate() + dayInterval);
            }
          }
        } catch (error) {
          console.error('Error creating meeting:', error);
          // Don't fail the group creation if meeting creation fails
          // Just log the error
        }
      }
      
      // Show success
      setSuccess('Study group created successfully!');

      // Navigate to the new group after a short delay
      setTimeout(() => {
        navigate(`/groups/${groupId}`);
      }, 1000);
    } catch (error) {
      console.error('Error creating group:', error);
      setError('Failed to create group. Please try again.');
      setLoading(false);
    }
  };

  // Helper to get department name for a major
  const getDepartmentForMajor = (majorCode) => {
    const major = majors.find(m => m.code === majorCode);
    if (!major) return '';
    
    const departmentCode = major.department;
    let departmentName = '';
    
    departments.forEach(faculty => {
      faculty.departments.forEach(department => {
        if (department.code === departmentCode) {
          departmentName = department.name;
        }
      });
    });
    
    return departmentName;
  };

  // Helper to get major name from code
  const getMajorName = (majorCode) => {
    const major = majors.find(m => m.code === majorCode);
    return major?.name || majorCode;
  };

  // Filter study spots by search term
  const filteredStudySpots = studyLocations.filter((spot) => {
    const searchTerm = locationSearch.toLowerCase();
    return (
      spot.name.toLowerCase().includes(searchTerm) ||
      (spot.features && spot.features.some((feature) => feature.toLowerCase().includes(searchTerm)))
    );
  });

  const handleSearchChange = (e) => {
    setLocationSearch(e.target.value);
  };

  const handleMarkerClick = (spot) => {
    setShowInfoWindow(spot.id);
    setCoordinates({ lat: spot.location.lat, lng: spot.location.lng });
    setMeetingLocation(spot.name);
  };

  const toggleMapType = () => {
    setMapType((prevType) => (prevType === 'roadmap' ? 'satellite' : 'roadmap'));
  };
  // Define a helper to determine what content to show at each step
  const getStepContent = (step) => {
    // If coming from map (with location), we flip the order: 1=location, 2=basic info
    // Otherwise follow normal order: 1=basic info, 2=location
    const isLocationFirstFlow = location.state?.location ? true : false;
    
    if (step === 1) {
      return isLocationFirstFlow ? 'location' : 'basic-info';
    } else if (step === 2) {
      return isLocationFirstFlow ? 'basic-info' : 'location';
    } else {
      return 'settings'; // Step 3 is always settings
    }
  };

  if (majorsModulesLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen dark:bg-ios-dark-bg">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-ios-blue dark:border-ios-teal"></div>
      </div>
    );
  }
  // Determine step labels based on flow
  const isLocationFirstFlow = location.state?.location ? true : false;
  const step1Label = isLocationFirstFlow ? "Meeting Details" : "Basic Info";
  const step2Label = isLocationFirstFlow ? "Basic Info" : "Meeting Details";

  // Render step indicators
  const renderStepIndicators = () => {
    return (
      <div className="mb-6">
        <div className="flex items-center justify-center">
          <div className={`h-2 w-2 md:w-3 md:h-3 rounded-full ${currentStep === 1 ? 'bg-ios-blue dark:bg-ios-teal' : 'bg-ios-gray4 dark:bg-ios-dark-secondary'}`}></div>
          <div className={`h-0.5 w-5 md:w-8 ${currentStep >= 2 ? 'bg-ios-blue dark:bg-ios-teal' : 'bg-ios-gray4 dark:bg-ios-dark-secondary'}`}></div>
          <div className={`h-2 w-2 md:w-3 md:h-3 rounded-full ${currentStep === 2 ? 'bg-ios-blue dark:bg-ios-teal' : 'bg-ios-gray4 dark:bg-ios-dark-secondary'}`}></div>
          <div className={`h-0.5 w-5 md:w-8 ${currentStep >= 3 ? 'bg-ios-blue dark:bg-ios-teal' : 'bg-ios-gray4 dark:bg-ios-dark-secondary'}`}></div>
          <div className={`h-2 w-2 md:w-3 md:h-3 rounded-full ${currentStep === 3 ? 'bg-ios-blue dark:bg-ios-teal' : 'bg-ios-gray4 dark:bg-ios-dark-secondary'}`}></div>
        </div>
        <div className="flex justify-between mt-1 text-ios-callout dark:text-ios-dark-text-secondary">
          <div className="text-center">{step1Label}</div>
          <div className="text-center">{step2Label}</div>
          <div className="text-center">Settings</div>
        </div>
      </div>
    );
  };  
  return (
    <div className="min-h-screen bg-ios-gray6 dark:bg-ios-dark-bg px-4 py-6 transition-colors duration-200">
      <div className="max-w-3xl mx-auto">
        <div className="flex items-center mb-4">
          <button 
            onClick={() => navigate(-1)}
            className="mr-3 p-2 rounded-full hover:bg-gray-200 dark:hover:bg-ios-dark-secondary transition-colors"
            aria-label="Go back"
          >
            <FaArrowLeft className="text-ios-blue dark:text-ios-teal" />
          </button>
          <h1 className="text-ios-title2 font-sf-pro text-black dark:text-ios-dark-text">Create Study Group</h1>
        </div>

        {renderStepIndicators()}
        
        {/* Success Message */}
        {success && (
          <div className="bg-green-100 border border-green-200 text-ios-green rounded-ios p-3 mb-4">
            {success}
          </div>
        )}
        
        {/* Error Message */}
        {error && (
          <div className="bg-red-100 border border-red-200 text-ios-red rounded-ios p-3 mb-4">
            {error}
          </div>
        )}
        
        {/* Location Quick Info - Show if location was passed from MapView */}
        {location.state?.location && coordinates && (
          <div className="bg-ios-blue bg-opacity-5 dark:bg-opacity-20 ios-card dark:bg-ios-dark-elevated dark:border-ios-dark-border shadow-sm p-4 mb-4">
            <h2 className="text-ios-title3 font-sf-pro text-ios-blue dark:text-ios-teal mb-1">Location Selected</h2>
            <p className="text-ios-body font-medium dark:text-ios-dark-text">{meetingLocation}</p>
            <p className="text-ios-subhead text-ios-gray dark:text-ios-dark-text-secondary">
              Coordinates: {coordinates.lat.toFixed(5)}, {coordinates.lng.toFixed(5)}
            </p>
          </div>
        )}
        
        {/* Module Quick Info */}
        {selectedModule && (
          <div className="bg-ios-blue bg-opacity-5 dark:bg-opacity-20 ios-card dark:bg-ios-dark-elevated dark:border-ios-dark-border shadow-sm p-4 mb-4">
            <h2 className="text-ios-title3 font-sf-pro text-ios-blue dark:text-ios-teal mb-1">Creating a group for:</h2>
            <p className="text-ios-body font-medium dark:text-ios-dark-text">{selectedModule.name}</p>
            <p className="text-ios-subhead text-ios-gray dark:text-ios-dark-text-secondary">{selectedModule.code}</p>
          </div>
        )}
        
        {/* Form */}
        <div className="bg-white dark:bg-ios-dark-elevated ios-card dark:border-ios-dark-border shadow-sm p-6 mb-4 transition-colors duration-200">
          <form onSubmit={handleSubmit}>            {/* Step 1: This can be either Basic Information or Meeting Details based on entry point */}
            {currentStep === 1 && getStepContent(1) === 'basic-info' && (
              <div className="space-y-4">
                <h2 className="text-ios-headline font-medium dark:text-ios-dark-text mb-4">
                  Basic Information
                </h2>
                
                {/* Group Name */}
                <div>
                  <label htmlFor="name" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Group Name*
                  </label>
                  <input
                    id="name"
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                    placeholder="e.g., Data Structures Study Group"
                    disabled={loading}
                    required
                  />
                </div>

                {/* Major Selection - Show user's major by default */}
                <div>
                  <label htmlFor="major" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Program/Major
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-3 flex items-center pointer-events-none">
                      <FaGraduationCap className="text-ios-gray dark:text-ios-dark-text-tertiary" />
                    </div>
                    {userProfile?.majorCode && !initialModuleCode ? (
                      <div className="ios-input w-full pl-10 dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text flex items-center">
                        <span className="mr-2">{getMajorName(userProfile.majorCode)}</span>
                        <span className="text-xs bg-ios-blue bg-opacity-10 dark:bg-ios-dark-tertiary px-2 py-0.5 rounded-full text-ios-blue dark:text-ios-teal">Your Major</span>
                      </div>
                    ) : (
                      <select
                        id="major"
                        value={selectedMajor}
                        onChange={handleMajorChange}
                        className="ios-input w-full pl-10 dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                        disabled={loading || !!initialModuleCode}
                      >
                        <option value="">All Programs</option>
                        {majors.map((major) => (
                          <option key={major.code} value={major.code}>
                            {major.name} - {getDepartmentForMajor(major.code)}
                          </option>
                        ))}
                      </select>
                    )}
                  </div>
                  {initialModuleCode && (
                    <p className="text-ios-footnote text-ios-gray dark:text-ios-dark-text-tertiary mt-1">
                      Program pre-selected based on module
                    </p>
                  )}
                </div>
                
                {/* Module Selection - Show user's modules by default */}
                <div>
                  <label htmlFor="moduleCode" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Module*
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-3 flex items-center pointer-events-none">
                      <FaBook className="text-ios-gray dark:text-ios-dark-text-tertiary" />
                    </div>
                    <select
                      id="moduleCode"
                      value={moduleCode}
                      onChange={handleModuleChange}
                      className="ios-input w-full pl-10 dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                      disabled={loading || !!initialModuleCode}
                      required
                    >
                      <option value="">-- Select a Module --</option>
                      
                      {/* User's modules */}
                      {userModuleDetails.length > 0 && (
                        <optgroup label="Your Modules">
                          {userModuleDetails.map(module => (
                            <option key={`user-${module.code}`} value={module.code}>
                              {module.name} ({module.code})
                            </option>
                          ))}
                        </optgroup>
                      )}
                      
                      {/* Show option to see all modules */}
                      {!showAllModules && userModuleDetails.length > 0 && (
                        <option value="" disabled>
                          -------- Show all modules --------
                        </option>
                      )}
                      
                      {/* All modules for the selected major */}
                      {(showAllModules || userModuleDetails.length === 0) && (selectedMajor ? filteredModules : modules).length > 0 && (
                        <optgroup label={userModuleDetails.length ? "All Modules" : (selectedMajor ? `Modules for ${getMajorName(selectedMajor)}` : "All Modules")}>
                          {(selectedMajor ? filteredModules : modules).map(module => (
                            !userModules.includes(module.code) && (
                              <option key={module.code} value={module.code}>
                                {module.name} ({module.code})
                              </option>
                            )
                          ))}
                        </optgroup>
                      )}
                    </select>
                  </div>
                  <div className="flex justify-between items-center mt-1">
                    {initialModuleCode ? (
                      <p className="text-ios-footnote text-ios-gray dark:text-ios-dark-text-tertiary">
                        Module pre-selected from previous page
                      </p>
                    ) : (
                      <>
                        <button 
                          type="button"
                          onClick={() => setShowAllModules(!showAllModules)}
                          className="text-ios-footnote text-ios-blue dark:text-ios-teal hover:underline"
                        >
                          {showAllModules ? "Show only my modules" : "Show all modules"}
                        </button>
                        {userModuleDetails.length === 0 && (
                          <Link to="/modules" className="text-ios-footnote text-ios-blue dark:text-ios-teal hover:underline">
                            Add modules to your profile
                          </Link>
                        )}
                      </>
                    )}
                  </div>
                </div>
                
                {/* Study Topic */}
                <div>
                  <label htmlFor="topic" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Study Topic (optional)
                  </label>
                  <input
                    id="topic"
                    type="text"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                    placeholder="e.g., Final Exam Review, Assignment 3"
                    disabled={loading}
                  />
                </div>
                
                {/* Description */}
                <div>
                  <label htmlFor="description" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Description*
                  </label>
                  <textarea
                    id="description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    className="ios-input w-full h-24 resize-none dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                    placeholder="Describe your study group's goals, what you'll be studying, etc."
                    disabled={loading}
                    required
                  />
                </div>
                
                {/* Meeting Date and Calendar Options */}
                <div className="mt-6 space-y-4">
                  <div className="border border-gray-300 dark:border-gray-600 p-4 rounded-lg space-y-4">
                    <div className="flex items-center justify-between">
                      <h3 className="text-md font-medium flex items-center">
                        <FaRegCalendarAlt className="mr-2 text-ios-blue dark:text-ios-teal" />
                        Schedule Meeting Date
                      </h3
                      >
                      
                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          id="enableCalendar"
                          checked={meetingDate !== ''}
                          onChange={(e) => {
                            if (!e.target.checked) {
                              setMeetingDate('');
                            } else {
                              // Set default to tomorrow
                              const tomorrow = new Date();
                              tomorrow.setDate(tomorrow.getDate() + 1);
                              setMeetingDate(tomorrow.toISOString().split('T')[0]);
                            }
                          }}
                          className="sr-only"
                          disabled={loading}
                        />
                        <label
                          htmlFor="enableCalendar"
                          className={`block overflow-hidden h-6 rounded-full w-12 cursor-pointer transition-colors duration-200 ease-in ${
                            meetingDate !== '' ? 'bg-ios-blue dark:bg-ios-teal' : 'bg-ios-gray4 dark:bg-ios-dark-tertiary'
                          }`}
                        >
                          <span
                            className={`block h-6 w-6 rounded-full bg-white shadow transform transition-transform duration-200 ease-in ${
                              meetingDate !== '' ? 'translate-x-6' : 'translate-x-0'
                            }`}
                          ></span>
                        </label>
                      </div>
                    </div>
                    
                    {/* Only show date fields if calendar is enabled */}
                    {meetingDate !== '' && (
                      <div className="space-y-4">
                        <div>
                          <label htmlFor="meetingDate" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Meeting Date
                          </label>
                          <input
                            type="date"
                            id="meetingDate"
                            value={meetingDate}
                            onChange={(e) => setMeetingDate(e.target.value)}
                            className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                            min={new Date().toISOString().split('T')[0]} // Can't select dates in the past
                            disabled={loading}
                          />
                        </div>
                        
                        <div className="flex items-center">
                          <input
                            type="checkbox"
                            id="addToCalendar"
                            checked={addToCalendar}
                            onChange={(e) => setAddToCalendar(e.target.checked)}
                            className="h-4 w-4 text-ios-blue focus:ring-ios-blue border-gray-300 rounded dark:border-gray-600 dark:bg-ios-dark-secondary"
                          />
                          <label htmlFor="addToCalendar" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                            Add this session to dashboard calendar
                          </label>
                        </div>
                        
                        <div className="flex items-center">
                          <input
                            type="checkbox"
                            id="recurringMeeting"
                            checked={recurringMeeting}
                            onChange={(e) => setRecurringMeeting(e.target.checked)}
                            className="h-4 w-4 text-ios-blue focus:ring-ios-blue border-gray-300 rounded dark:border-gray-600 dark:bg-ios-dark-secondary"
                          />
                          <label htmlFor="recurringMeeting" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                            Make this a recurring meeting
                          </label>
                        </div>
                        
                        {recurringMeeting && (
                          <div className="pl-6 border-l-2 border-ios-blue dark:border-ios-teal space-y-3">
                            <div>
                              <label htmlFor="recurrencePattern" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Repeat Frequency
                              </label>
                              <select
                                id="recurrencePattern"
                                value={recurrencePattern}
                                onChange={(e) => setRecurrencePattern(e.target.value)}
                                className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                                disabled={loading}
                              >
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="biweekly">Bi-weekly</option>
                                <option value="monthly">Monthly</option>
                              </select>
                            </div>
                            
                            <div>
                              <label htmlFor="recurrenceEndDate" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                End Date (optional)
                              </label>
                              <input
                                type="date"
                                id="recurrenceEndDate"
                                value={recurrenceEndDate}
                                onChange={(e) => setRecurrenceEndDate(e.target.value)}
                                className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                                min={meetingDate} // Can't be before the start date
                                disabled={loading}
                              />
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Time Picker Component */}
                <div className="mt-3">
                  <label className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Specific Meeting Time
                  </label>
                  <div className="grid grid-cols-3 gap-2">
                    <div>
                      <label htmlFor="meetingTimeHour" className="sr-only">Hour</label>
                      <select
                        id="meetingTimeHour"
                        value={meetingTimeHour}
                        onChange={(e) => setMeetingTimeHour(e.target.value)}
                        className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                        disabled={loading}
                      >
                        {[...Array(12)].map((_, i) => (
                          <option key={i + 1} value={(i + 1).toString().padStart(2, '0')}>
                            {i + 1}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <label htmlFor="meetingTimeMinute" className="sr-only">Minute</label>
                      <select
                        id="meetingTimeMinute"
                        value={meetingTimeMinute}
                        onChange={(e) => setMeetingTimeMinute(e.target.value)}
                        className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                        disabled={loading}
                      >
                        <option value="00">00</option>
                        <option value="15">15</option>
                        <option value="30">30</option>
                        <option value="45">45</option>
                      </select>
                    </div>
                    <div>
                      <label htmlFor="meetingTimeAmPm" className="sr-only">AM/PM</label>
                      <select
                        id="meetingTimeAmPm"
                        value={meetingTimeAmPm}
                        onChange={(e) => setMeetingTimeAmPm(e.target.value)}
                        className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                        disabled={loading}
                      >
                        <option value="AM">AM</option>
                        <option value="PM">PM</option>
                      </select>
                    </div>
                  </div>
                  <p className="text-xs text-ios-gray dark:text-ios-dark-text-tertiary mt-1">
                    This time will be added to the calendar if a meeting date is selected
                  </p>
                </div>
                
                <div className="pt-4 flex justify-end">
                  <button
                    type="button"
                    onClick={handleNextStep}
                    className="ios-button px-6"
                    disabled={loading}
                  >
                    Next
                  </button>
                </div>
              </div>
            )}            {/* Step 1: This can be either Basic Information or Meeting Details based on entry point */}
            {currentStep === 1 && getStepContent(1) === 'location' && (
              <div className="space-y-4">
                <h2 className="text-ios-headline font-medium dark:text-ios-dark-text mb-4">
                  Meeting Details
                </h2>
                
                <div>
                  <label htmlFor="meetingLocation" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Meeting Location
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-3 flex items-center pointer-events-none">
                      <FaMapMarkerAlt className="text-ios-gray dark:text-ios-dark-text-tertiary" />
                    </div>
                    <input
                      id="meetingLocation"
                      type="text"
                      value={meetingLocation}
                      onChange={(e) => setMeetingLocation(e.target.value)}
                      className="ios-input w-full pl-10 dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                      placeholder="e.g., Library, Room 204"
                      disabled={loading}
                    />
                  </div>
                </div>

                {/* Study spot suggestions */}
                <div className="mb-4">
                  <h3 className="text-ios-subhead font-medium text-ios-gray dark:text-ios-dark-text-secondary mb-2">Suggested Locations:</h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    {filteredStudySpots.map((spot) => (
                      <button
                        key={spot.id}
                        type="button"
                        onClick={() => handlePredefinedLocation(spot)}
                        className={`text-left p-2 border rounded-md hover:bg-ios-blue-50 dark:hover:bg-ios-dark-secondary transition-colors ${
                          selectedPredefinedLocation?.id === spot.id 
                            ? 'border-ios-blue dark:border-ios-teal bg-ios-blue-50 dark:bg-opacity-10' 
                            : 'border-ios-gray4 dark:border-ios-dark-border dark:text-ios-dark-text-secondary'
                        }`}
                      >
                        <p className="font-medium dark:text-ios-dark-text">{spot.name}</p>
                        <p className="text-xs text-ios-gray dark:text-ios-dark-text-tertiary">
                          {spot.category && spot.category.charAt(0).toUpperCase() + spot.category.slice(1).replace('_', ' ')}
                        </p>
                      </button>
                    ))}
                  </div>
                </div>

                <div>
                  <label htmlFor="meetingTime" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Meeting Time
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-3 flex items-center pointer-events-none">
                      <FaClock className="text-ios-gray dark:text-ios-dark-text-tertiary" />
                    </div>
                    <input
                      id="meetingTime"
                      type="text"
                      value={meetingTime}
                      onChange={(e) => setMeetingTime(e.target.value)}
                      className="ios-input w-full pl-10 dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                      placeholder="e.g., Tuesdays at 6pm, or December 15 at 3pm"
                      disabled={loading}
                    />
                  </div>
                </div>
                
                {/* Location Sharing Toggle */}
                <div className="bg-ios-gray6 dark:bg-ios-dark-secondary p-4 rounded-lg mt-4">
                  <div className="flex items-center justify-between mb-3">
                    <div>
                      <div className="flex items-center">
                        <h3 className="text-ios-body font-medium dark:text-ios-dark-text">Add Meeting Location to Map</h3>
                        <button 
                          type="button"
                          onClick={() => setIsLocationHelpVisible(!isLocationHelpVisible)}
                          className="ml-1 text-ios-blue dark:text-ios-teal"
                          aria-label="Show Location Help"
                        >
                          <FaInfoCircle size={16} />
                        </button>
                      </div>
                      <p className="text-ios-footnote text-ios-gray dark:text-ios-dark-text-tertiary">
                        Show your meeting spot on the map
                      </p>
                      {isLocationHelpVisible && (
                        <div className="bg-ios-blue-50 dark:bg-ios-dark-secondary border dark:border-ios-dark-border text-ios-blue dark:text-ios-teal p-2 rounded mt-1 text-xs">
                          Your study group will be visible on the map, making it easier for people to find you.
                        </div>
                      )}
                    </div>
                    <div className="relative inline-block w-12 align-middle select-none">
                      <input
                        type="checkbox"
                        name="useLocation"
                        id="useLocation"
                        checked={useLocation}
                        onChange={handleLocationToggle}
                        className="hidden"
                        disabled={loading}
                      />
                      <label
                        htmlFor="useLocation"
                        className={`block overflow-hidden h-6 rounded-full cursor-pointer transition-colors duration-200 ease-in ${
                          useLocation ? 'bg-ios-blue dark:bg-ios-teal' : 'bg-ios-gray4 dark:bg-ios-dark-tertiary'
                        }`}
                      >
                        <span
                          className={`block h-6 w-6 rounded-full bg-white shadow transform transition-transform duration-200 ease-in ${
                            useLocation ? 'translate-x-6' : 'translate-x-0'
                          }`}
                        ></span>
                      </label>
                    </div>
                  </div>
                  
                  {/* Map for Choosing Location */}
                  {useLocation && (
                    <div className="mt-4 mb-4 border rounded-ios overflow-hidden dark:border-ios-dark-border">
                      <div className="search-bar mb-2">
                        <input
                          type="text"
                          placeholder="Search for study spots..."
                          value={locationSearch}
                          onChange={handleSearchChange}
                          className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                        />
                      </div>
                      
                      {/* Enhanced Map View */}
                      {isLoaded && !loadError && (
                        <div style={{ height: '350px', width: '100%' }}>
                          <SmallMapView 
                            center={coordinates || { lat: 51.242, lng: -0.589 }}
                            zoom={15}
                            mapType={mapType}
                            markers={filteredStudySpots.map(spot => ({
                              id: spot.id,
                              position: { lat: spot.location.lat, lng: spot.location.lng },
                              title: spot.name,
                              category: spot.category || 'study',
                              description: spot.description,
                              isSelected: selectedPredefinedLocation?.id === spot.id
                            }))}                            selectedLocation={coordinates}
                            onMapClick={(e) => {                              if (e && typeof e.lat !== 'undefined' && typeof e.lng !== 'undefined') {
                                // Position already processed by SmallMapView
                                handleLocationSelect(e);
                              } else if (e && e.latLng && typeof e.latLng.lat === 'function' && typeof e.latLng.lng === 'function') {
                                // Raw Google Maps event
                                handleLocationSelect({ lat: e.latLng.lat(), lng: e.latLng.lng() });
                              } else {
                                console.error('Invalid map click event:', e);
                              }
                            }}
                            onMarkerClick={(marker) => {
                              const spot = filteredStudySpots.find(s => s.id === marker.id);
                              if (spot) handleMarkerClick(spot);
                            }}
                            showControls={true}
                            onMapTypeChange={toggleMapType}
                            allowUserLocation={true}
                          />
                        </div>
                      )}
                      {loadError && (
                        <div className="h-full flex items-center justify-center bg-gray-100 dark:bg-gray-800">
                          <p className="text-red-500 dark:text-red-400">Error loading map: {loadError.message}</p>
                        </div>
                      )}
                    </div>
                  )}
                
                </div>
                
                <div className="pt-4 flex justify-end">
                  <button
                    type="button"
                    onClick={handlePreviousStep}
                    className="text-ios-blue dark:text-ios-teal hover:underline"
                    disabled={loading}
                  >
                    &larr; Back
                  </button>
                  <button
                    type="button"
                    onClick={handleNextStep}
                    className="ios-button px-6"
                    disabled={loading}
                  >
                    Next
                  </button>
                </div>
              </div>
            )}            {/* Step 2: Basic Information or Meeting Details based on flow */}
            {currentStep === 2 && getStepContent(2) === 'basic-info' && (
              <div className="space-y-4">
                <h2 className="text-ios-headline font-medium dark:text-ios-dark-text mb-4">
                  Basic Information
                </h2>
                
                {/* Group Name */}
                <div>
                  <label htmlFor="name" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Group Name*
                  </label>
                  <input
                    id="name"
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                    placeholder="e.g., Data Structures Study Group"
                    disabled={loading}
                    required
                  />
                </div>

                {/* Major Selection - Show user's major by default */}
                <div>
                  <label htmlFor="major" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Program/Major
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-3 flex items-center pointer-events-none">
                      <FaGraduationCap className="text-ios-gray dark:text-ios-dark-text-tertiary" />
                    </div>
                    {userProfile?.majorCode && !initialModuleCode ? (
                      <div className="ios-input w-full pl-10 dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text flex items-center">
                        <span className="mr-2">{getMajorName(userProfile.majorCode)}</span>
                        <span className="text-xs bg-ios-blue bg-opacity-10 dark:bg-ios-dark-tertiary px-2 py-0.5 rounded-full text-ios-blue dark:text-ios-teal">Your Major</span>
                      </div>
                    ) : (
                      <select
                        id="major"
                        value={selectedMajor}
                        onChange={handleMajorChange}
                        className="ios-input w-full pl-10 dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                        disabled={loading || !!initialModuleCode}
                      >
                        <option value="">All Programs</option>
                        {majors.map((major) => (
                          <option key={major.code} value={major.code}>
                            {major.name} - {getDepartmentForMajor(major.code)}
                          </option>
                        ))}
                      </select>
                    )}
                  </div>
                  {initialModuleCode && (
                    <p className="text-ios-footnote text-ios-gray dark:text-ios-dark-text-tertiary mt-1">
                      Program pre-selected based on module
                    </p>
                  )}
                </div>
                
                {/* Module Selection - Show user's modules by default */}
                <div>
                  <label htmlFor="moduleCode" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Module*
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-3 flex items-center pointer-events-none">
                      <FaBook className="text-ios-gray dark:text-ios-dark-text-tertiary" />
                    </div>
                    <select
                      id="moduleCode"
                      value={moduleCode}
                      onChange={handleModuleChange}
                      className="ios-input w-full pl-10 dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                      disabled={loading || !!initialModuleCode}
                      required
                    >
                      <option value="">-- Select a Module --</option>
                      
                      {/* User's modules */}
                      {userModuleDetails.length > 0 && (
                        <optgroup label="Your Modules">
                          {userModuleDetails.map(module => (
                            <option key={`user-${module.code}`} value={module.code}>
                              {module.name} ({module.code})
                            </option>
                          ))}
                        </optgroup>
                      )}
                      
                      {/* Show option to see all modules */}
                      {!showAllModules && userModuleDetails.length > 0 && (
                        <option value="" disabled>
                          -------- Show all modules --------
                        </option>
                      )}
                      
                      {/* All modules for the selected major */}
                      {(showAllModules || userModuleDetails.length === 0) && (selectedMajor ? filteredModules : modules).length > 0 && (
                        <optgroup label={userModuleDetails.length ? "All Modules" : (selectedMajor ? `Modules for ${getMajorName(selectedMajor)}` : "All Modules")}>
                          {(selectedMajor ? filteredModules : modules).map(module => (
                            !userModules.includes(module.code) && (
                              <option key={module.code} value={module.code}>
                                {module.name} ({module.code})
                              </option>
                            )
                          ))}
                        </optgroup>
                      )}
                    </select>
                  </div>
                  <div className="flex justify-between items-center mt-1">
                    {initialModuleCode ? (
                      <p className="text-ios-footnote text-ios-gray dark:text-ios-dark-text-tertiary">
                        Module pre-selected from previous page
                      </p>
                    ) : (
                      <>
                        <button 
                          type="button"
                          onClick={() => setShowAllModules(!showAllModules)}
                          className="text-ios-footnote text-ios-blue dark:text-ios-teal hover:underline"
                        >
                          {showAllModules ? "Show only my modules" : "Show all modules"}
                        </button>
                        {userModuleDetails.length === 0 && (
                          <Link to="/modules" className="text-ios-footnote text-ios-blue dark:text-ios-teal hover:underline">
                            Add modules to your profile
                          </Link>
                        )}
                      </>
                    )}
                  </div>
                </div>
                
                {/* Study Topic */}
                <div>
                  <label htmlFor="topic" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Study Topic (optional)
                  </label>
                  <input
                    id="topic"
                    type="text"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                    placeholder="e.g., Final Exam Review, Assignment 3"
                    disabled={loading}
                  />
                </div>
                
                {/* Description */}
                <div>
                  <label htmlFor="description" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Description*
                  </label>
                  <textarea
                    id="description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    className="ios-input w-full h-24 resize-none dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                    placeholder="Describe your study group's goals, what you'll be studying, etc."
                    disabled={loading}
                    required
                  />
                </div>
                
                {/* Meeting Date and Calendar Options */}
                <div className="mt-6 space-y-4">
                  <div className="border border-gray-300 dark:border-gray-600 p-4 rounded-lg space-y-4">
                    <div className="flex items-center justify-between">
                      <h3 className="text-md font-medium flex items-center">
                        <FaRegCalendarAlt className="mr-2 text-ios-blue dark:text-ios-teal" />
                        Schedule Meeting Date
                      </h3
                      >
                      
                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          id="enableCalendar"
                          checked={meetingDate !== ''}
                          onChange={(e) => {
                            if (!e.target.checked) {
                              setMeetingDate('');
                            } else {
                              // Set default to tomorrow
                              const tomorrow = new Date();
                              tomorrow.setDate(tomorrow.getDate() + 1);
                              setMeetingDate(tomorrow.toISOString().split('T')[0]);
                            }
                          }}
                          className="sr-only"
                          disabled={loading}
                        />
                        <label
                          htmlFor="enableCalendar"
                          className={`block overflow-hidden h-6 rounded-full w-12 cursor-pointer transition-colors duration-200 ease-in ${
                            meetingDate !== '' ? 'bg-ios-blue dark:bg-ios-teal' : 'bg-ios-gray4 dark:bg-ios-dark-tertiary'
                          }`}
                        >
                          <span
                            className={`block h-6 w-6 rounded-full bg-white shadow transform transition-transform duration-200 ease-in ${
                              meetingDate !== '' ? 'translate-x-6' : 'translate-x-0'
                            }`}
                          ></span>
                        </label>
                      </div>
                    </div>
                    
                    {/* Only show date fields if calendar is enabled */}
                    {meetingDate !== '' && (
                      <div className="space-y-4">
                        <div>
                          <label htmlFor="meetingDate" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Meeting Date
                          </label>
                          <input
                            type="date"
                            id="meetingDate"
                            value={meetingDate}
                            onChange={(e) => setMeetingDate(e.target.value)}
                            className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                            min={new Date().toISOString().split('T')[0]} // Can't select dates in the past
                            disabled={loading}
                          />
                        </div>
                        
                        <div className="flex items-center">
                          <input
                            type="checkbox"
                            id="addToCalendar"
                            checked={addToCalendar}
                            onChange={(e) => setAddToCalendar(e.target.checked)}
                            className="h-4 w-4 text-ios-blue focus:ring-ios-blue border-gray-300 rounded dark:border-gray-600 dark:bg-ios-dark-secondary"
                          />
                          <label htmlFor="addToCalendar" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                            Add this session to dashboard calendar
                          </label>
                        </div>
                        
                        <div className="flex items-center">
                          <input
                            type="checkbox"
                            id="recurringMeeting"
                            checked={recurringMeeting}
                            onChange={(e) => setRecurringMeeting(e.target.checked)}
                            className="h-4 w-4 text-ios-blue focus:ring-ios-blue border-gray-300 rounded dark:border-gray-600 dark:bg-ios-dark-secondary"
                          />
                          <label htmlFor="recurringMeeting" className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                            Make this a recurring meeting
                          </label>
                        </div>
                        
                        {recurringMeeting && (
                          <div className="pl-6 border-l-2 border-ios-blue dark:border-ios-teal space-y-3">
                            <div>
                              <label htmlFor="recurrencePattern" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Repeat Frequency
                              </label>
                              <select
                                id="recurrencePattern"
                                value={recurrencePattern}
                                onChange={(e) => setRecurrencePattern(e.target.value)}
                                className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                                disabled={loading}
                              >
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="biweekly">Bi-weekly</option>
                                <option value="monthly">Monthly</option>
                              </select>
                            </div>
                            
                            <div>
                              <label htmlFor="recurrenceEndDate" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                End Date (optional)
                              </label>
                              <input
                                type="date"
                                id="recurrenceEndDate"
                                value={recurrenceEndDate}
                                onChange={(e) => setRecurrenceEndDate(e.target.value)}
                                className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                                min={meetingDate} // Can't be before the start date
                                disabled={loading}
                              />
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Time Picker Component */}
                <div className="mt-3">
                  <label className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Specific Meeting Time
                  </label>
                  <div className="grid grid-cols-3 gap-2">
                    <div>
                      <label htmlFor="meetingTimeHour" className="sr-only">Hour</label>
                      <select
                        id="meetingTimeHour"
                        value={meetingTimeHour}
                        onChange={(e) => setMeetingTimeHour(e.target.value)}
                        className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                        disabled={loading}
                      >
                        {[...Array(12)].map((_, i) => (
                          <option key={i + 1} value={(i + 1).toString().padStart(2, '0')}>
                            {i + 1}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <label htmlFor="meetingTimeMinute" className="sr-only">Minute</label>
                      <select
                        id="meetingTimeMinute"
                        value={meetingTimeMinute}
                        onChange={(e) => setMeetingTimeMinute(e.target.value)}
                        className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                        disabled={loading}
                      >
                        <option value="00">00</option>
                        <option value="15">15</option>
                        <option value="30">30</option>
                        <option value="45">45</option>
                      </select>
                    </div>
                    <div>
                      <label htmlFor="meetingTimeAmPm" className="sr-only">AM/PM</label>
                      <select
                        id="meetingTimeAmPm"
                        value={meetingTimeAmPm}
                        onChange={(e) => setMeetingTimeAmPm(e.target.value)}
                        className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                        disabled={loading}
                      >
                        <option value="AM">AM</option>
                        <option value="PM">PM</option>
                      </select>
                    </div>
                  </div>
                  <p className="text-xs text-ios-gray dark:text-ios-dark-text-tertiary mt-1">
                    This time will be added to the calendar if a meeting date is selected
                  </p>
                </div>
                
                <div className="pt-4 flex justify-end">
                  <button
                    type="button"
                    onClick={handlePreviousStep}
                    className="text-ios-blue dark:text-ios-teal hover:underline"
                    disabled={loading}
                  >
                    &larr; Back
                  </button>
                  <button
                    type="button"
                    onClick={handleNextStep}
                    className="ios-button px-6"
                    disabled={loading}
                  >
                    Next
                  </button>
                </div>
              </div>
            )}
            {currentStep === 2 && getStepContent(2) === 'location' && (
              <div className="space-y-4">
                <h2 className="text-ios-headline font-medium dark:text-ios-dark-text mb-4">
                  Meeting Details
                </h2>
                
                <div>
                  <label htmlFor="meetingLocation" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Meeting Location
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-3 flex items-center pointer-events-none">
                      <FaMapMarkerAlt className="text-ios-gray dark:text-ios-dark-text-tertiary" />
                    </div>
                    <input
                      id="meetingLocation"
                      type="text"
                      value={meetingLocation}
                      onChange={(e) => setMeetingLocation(e.target.value)}
                      className="ios-input w-full pl-10 dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                      placeholder="e.g., Library, Room 204"
                      disabled={loading}
                    />
                  </div>
                </div>

                {/* Study spot suggestions */}
                <div className="mb-4">
                  <h3 className="text-ios-subhead font-medium text-ios-gray dark:text-ios-dark-text-secondary mb-2">Suggested Locations:</h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    {filteredStudySpots.map((spot) => (
                      <button
                        key={spot.id}
                        type="button"
                        onClick={() => handlePredefinedLocation(spot)}
                        className={`text-left p-2 border rounded-md hover:bg-ios-blue-50 dark:hover:bg-ios-dark-secondary transition-colors ${
                          selectedPredefinedLocation?.id === spot.id 
                            ? 'border-ios-blue dark:border-ios-teal bg-ios-blue-50 dark:bg-opacity-10' 
                            : 'border-ios-gray4 dark:border-ios-dark-border dark:text-ios-dark-text-secondary'
                        }`}
                      >
                        <p className="font-medium dark:text-ios-dark-text">{spot.name}</p>
                        <p className="text-xs text-ios-gray dark:text-ios-dark-text-tertiary">
                          {spot.category && spot.category.charAt(0).toUpperCase() + spot.category.slice(1).replace('_', ' ')}
                        </p>
                      </button>
                    ))}
                  </div>
                </div>

                <div>
                  <label htmlFor="meetingTime" className="block text-ios-gray dark:text-ios-dark-text-secondary font-sf-pro-text text-ios-subhead mb-1">
                    Meeting Time
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-3 flex items-center pointer-events-none">
                      <FaClock className="text-ios-gray dark:text-ios-dark-text-tertiary" />
                    </div>
                    <input
                      id="meetingTime"
                      type="text"
                      value={meetingTime}
                      onChange={(e) => setMeetingTime(e.target.value)}
                      className="ios-input w-full pl-10 dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                      placeholder="e.g., Tuesdays at 6pm, or December 15 at 3pm"
                      disabled={loading}
                    />
                  </div>
                </div>
                
                {/* Location Sharing Toggle */}
                <div className="bg-ios-gray6 dark:bg-ios-dark-secondary p-4 rounded-lg mt-4">
                  <div className="flex items-center justify-between mb-3">
                    <div>
                      <div className="flex items-center">
                        <h3 className="text-ios-body font-medium dark:text-ios-dark-text">Add Meeting Location to Map</h3>
                        <button 
                          type="button"
                          onClick={() => setIsLocationHelpVisible(!isLocationHelpVisible)}
                          className="ml-1 text-ios-blue dark:text-ios-teal"
                          aria-label="Show Location Help"
                        >
                          <FaInfoCircle size={16} />
                        </button>
                      </div>
                      <p className="text-ios-footnote text-ios-gray dark:text-ios-dark-text-tertiary">
                        Show your meeting spot on the map
                      </p>
                      {isLocationHelpVisible && (
                        <div className="bg-ios-blue-50 dark:bg-ios-dark-secondary border dark:border-ios-dark-border text-ios-blue dark:text-ios-teal p-2 rounded mt-1 text-xs">
                          Your study group will be visible on the map, making it easier for people to find you.
                        </div>
                      )}
                    </div>
                    <div className="relative inline-block w-12 align-middle select-none">
                      <input
                        type="checkbox"
                        name="useLocation"
                        id="useLocation"
                        checked={useLocation}
                        onChange={handleLocationToggle}
                        className="hidden"
                        disabled={loading}
                      />
                      <label
                        htmlFor="useLocation"
                        className={`block overflow-hidden h-6 rounded-full cursor-pointer transition-colors duration-200 ease-in ${
                          useLocation ? 'bg-ios-blue dark:bg-ios-teal' : 'bg-ios-gray4 dark:bg-ios-dark-tertiary'
                        }`}
                      >
                        <span
                          className={`block h-6 w-6 rounded-full bg-white shadow transform transition-transform duration-200 ease-in ${
                            useLocation ? 'translate-x-6' : 'translate-x-0'
                          }`}
                        ></span>
                      </label>
                    </div>
                  </div>
                  
                  {/* Map for Choosing Location */}
                  {useLocation && (
                    <div className="mt-4 mb-4 border rounded-ios overflow-hidden dark:border-ios-dark-border">
                      <div className="search-bar mb-2">
                        <input
                          type="text"
                          placeholder="Search for study spots..."
                          value={locationSearch}
                          onChange={handleSearchChange}
                          className="ios-input w-full dark:bg-ios-dark-secondary dark:border-ios-dark-border dark:text-ios-dark-text"
                        />
                      </div>
                      
                      {/* Enhanced Map View */}
                      {isLoaded && !loadError && (
                        <div style={{ height: '350px', width: '100%' }}>
                          <SmallMapView 
                            center={coordinates || { lat: 51.242, lng: -0.589 }}
                            zoom={15}
                            mapType={mapType}
                            markers={filteredStudySpots.map(spot => ({
                              id: spot.id,
                              position: { lat: spot.location.lat, lng: spot.location.lng },
                              title: spot.name,
                              category: spot.category || 'study',
                              description: spot.description,
                              isSelected: selectedPredefinedLocation?.id === spot.id
                            }))}                            selectedLocation={coordinates}
                            onMapClick={(e) => {                              if (e && typeof e.lat !== 'undefined' && typeof e.lng !== 'undefined') {
                                // Position already processed by SmallMapView
                                handleLocationSelect(e);
                              } else if (e && e.latLng && typeof e.latLng.lat === 'function' && typeof e.latLng.lng === 'function') {
                                // Raw Google Maps event
                                handleLocationSelect({ lat: e.latLng.lat(), lng: e.latLng.lng() });
                              } else {
                                console.error('Invalid map click event:', e);
                              }
                            }}
                            onMarkerClick={(marker) => {
                              const spot = filteredStudySpots.find(s => s.id === marker.id);
                              if (spot) handleMarkerClick(spot);
                            }}
                            showControls={true}
                            onMapTypeChange={toggleMapType}
                            allowUserLocation={true}
                          />
                        </div>
                      )}
                      {loadError && (
                        <div className="h-full flex items-center justify-center bg-gray-100 dark:bg-gray-800">
                          <p className="text-red-500 dark:text-red-400">Error